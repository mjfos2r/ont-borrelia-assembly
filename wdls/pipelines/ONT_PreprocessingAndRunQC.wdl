version 1.0
import "../../structs/Structs.wdl"
import "../../tasks/plotting/NanoPlot.wdl" as NP
import "../../workflows/Preprocessing.wdl" as Preproc
import "../../workflows/QC.wdl"

workflow ONT_PreprocessingAndRunQC {
    meta {
        description: "Take in the tarball of the bam_pass file for our run, decompress it, merge all of the bams for each barcode, rename the barcode, then trim, filter, and generate QC report for all of our samples. Also generate a NanoPlot from the ONT summary.txt file"
    }

    parameter_meta {
        RunTarball: "Gzipped tarball of bam_pass generated by the sequencer"
        RunChecksum: "md5sum of the tarball containing all of the directories"
        ONTSummary: "sequencing summary file generated by dorado"
        reference_fa: "Reference genome to use in aligning reads (B31)"
        samplesheet: "samplesheet containing sample information, most importantly, the barcode_id and sample_alias"
        contam_fa: "FASTA file of contamination sequences to remove"
        aln_prefix: "Prefix for alignment files"
    }

    input {
        File RunTarball
        File RunChecksum
        File ONTSummary
        File reference_fa
        File samplesheet
        File contam_fa
        String aln_prefix = "vB31"
    }

    # Run Preprocessing workflow
    call Preproc.Preprocessing {
        input:
            RunTarball = RunTarball,
            RunChecksum = RunChecksum,
            samplesheet = samplesheet,
            contam_fa = contam_fa
    }

    # Generate run-level QC from ONT summary file
    call NP.NanoPlotFromSummary { input: summary_file = ONTSummary }

    output {
        # Run-level metadata from Preprocessing
        ## Metadata parsed from samplesheet
        Array[String] position_id = Preprocessing.position_id
        Array[String] experiment_id = Preprocessing.experiment_id
        Array[String] flow_cell_product_code = Preprocessing.flow_cell_product_code
        Array[String] kit = Preprocessing.kit
        Array[String] barcode = Preprocessing.barcode
        Array[String] sample_id = Preprocessing.sample_id
        # Validation output
        Boolean md5_validation_passed = Preprocessing.is_valid
        # decompressed outputs from DecompressRunTarball if md5 is valid.
        Int? directory_count = DecompressRunTarball.directory_count
        Array[Int]? bam_counts = Preprocessing.bam_counts
        Array[String]? barcode_dirs = Preprocessing.barcode_dirs
        Array[File]? bam_lists = Preprocessing.bam_lists
        Map[String, Array[File]] barcode_to_bams_map = Preprocessing.barcode_to_bams_map

        # NanoPlot outputs
        File  nanoplot_stats = NanoPlotFromSummary.stats
        File nanoplot_map = NanoPlotFromSummary.map
        Array[File] nanoplot_plots = NanoPlotFromSummary.plots
        Map[String, Float] stats_map = NanoPlotFromSummary.stats_map
    }
}